plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'net.minecraftforge.gradle.userdev' version '3.1.1'
    id 'maven-publish'
}

evaluationDependsOn(':version')

//if (!System.env.USE_SUBMODULES) {
  //  afterEvaluate {
 //       def tesseract = tasks.create('buildTesseractDependency')
 //       tesseract.dependsOn(gradle.includedBuild('tesseract').task(':forge:publishToMavenLocal'))
  //      tasks.findByPath(':compileJava').dependsOn(tesseract)
  //  }
//}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task deobfJar(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.deobf]
    classifier "dev"
}

group = 'com.github.gregtech-intergalactical'
archivesBaseName = 'antimatter'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'antimatter', '--all', '--output', project.file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    if (!System.env.RELEASE) {
        mavenLocal()
    } else {
        maven { url 'https://files.axelandre42.ovh/maven' }
    }

    maven { url 'http://dvs1.progwml6.com/files/maven' }
    maven { url 'https://modmaven.k-4u.nl' }
    maven {url = 'https://files.minecraftforge.net/maven'}
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation 'com.github.gregtech-intergalactical:tesseract-forge:0.0.+:dev' changing true

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

if (!System.env.RELEASE) {
    build.dependsOn 'publishToMavenLocal'
}

project.afterEvaluate {
    publishing {
        publications {
            fat(MavenPublication) {
                artifact jar
                artifact deobfJar
            }
        }

        repositories {
            if (System.env.MAVEN_URL) {
                maven {
                    url = System.env.MAVEN_URL

                    if (System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD) {
                        authentication {
                            basic(BasicAuthentication)
                        }

                        credentials {
                            username = System.env.USERNAME
                            password = System.env.PASSWORD
                        }
                    }
                }
            }
        }
    }

}